"use strict";!function(o){var t='.gt-times {font-family: "times new roman";font-style: normal !important;font-weight: bold;text-transform: uppercase;}.gt-times .gt-times sup {display: none;}',n=["GYROTONIC EXPANSION SYSTEM","GYROTONIC","GYROKINESIS","GYROTONER"],r=["span","p","a","h1","h2","h3","h4","h5","h6","li"];function a(){o(function(a){a("body").append("<style>"+t+"</style>"),a.each(n,function(t,e){var i=[],s=[],n=new RegExp("(?<!<[^>]*)"+e+"速","g"),o=new RegExp("(?<!<[^>]*)"+e,"g");a.each(r,function(t,n){i.push(n+":contains("+e+"速),"+n+":contains("+e+"&reg;)"),s.push(n+":contains("+e+")")}),a(i.join(",")).each(function(){var t=(t=a(this).html()).replace(n,'<span class="gt-times">'+e+"<sup>速</sup></span>");a(this).html(t)});o=new RegExp(e,"g");a(s.join(",")).not(".gt-times").each(function(){var t=(t=a(this).html()).replace(o,'<span class="gt-times">'+e+"<sup>速</sup></span>");a(this).html(t)})})})}var p=!1;setTimeout(function t(){if(window.$&&window.$()&&window.$().jquery)o=window.$;else if(!o||!o.jquery)return p||(n="//code.jquery.com/jquery-3.2.1.min.js",e="jquery",(s=document).getElementById(e)||((i=s.createElement("script")).src=n,i.id=e,s.body.appendChild(i)),p=!0),setTimeout(t,200);var n,e,i,s;window.GT_MANUAL||a()},1),window.gyrotonicTrademarks={apply:a}}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJjc3NSdWxlcyIsInJlZ1R5cGVzIiwicmVnQ29udGFpbmVycyIsInJlcGxhY2VUcmFkZW1hcmtzIiwiJCIsImFwcGVuZCIsImVhY2giLCJpIiwidGVybSIsImNvbnRhaW5lclNlbGVjdG9ycyIsImNvbnRhaW5lclNlbGVjdG9yc05vUmVnIiwidGVybVJyZSIsIlJlZ0V4cCIsInRlcm1SZSIsImoiLCJjb250YWluZXIiLCJwdXNoIiwiam9pbiIsInRleHQiLCJ0aGlzIiwiaHRtbCIsInJlcGxhY2UiLCJub3QiLCJpbmplY3RlZCIsInNldFRpbWVvdXQiLCJfaW5pdCIsIndpbmRvdyIsImpxdWVyeSIsInUiLCJkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInMiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiaWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJHVF9NQU5VQUwiLCJneXJvdG9uaWNUcmFkZW1hcmtzIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJjQUFBLFNBQVdBLEdBQ1QsSUFBSUMsRUFBVyxnS0FVWEMsRUFBVyxDQUFDLDZCQUE4QixZQUFhLGNBQWUsYUFDdEVDLEVBQWdCLENBQUMsT0FBUSxJQUFLLElBQUssS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFHM0UsU0FBU0MsSUFDUEosRUFBTyxTQUFTSyxHQUVkQSxFQUFFLFFBQVFDLE9BQU8sVUFBWUwsRUFBVyxZQUV4Q0ksRUFBRUUsS0FBS0wsRUFBVSxTQUFVTSxFQUFHQyxHQUM1QixJQUFJQyxFQUFxQixHQUNyQkMsRUFBMEIsR0FFMUJDLEVBQVUsSUFBSUMsT0FBTyxjQUFnQkosRUFBTyxJQUFLLEtBQ2pESyxFQUFTLElBQUlELE9BQU8sY0FBZ0JKLEVBQU0sS0FROUNKLEVBQUVFLEtBQUtKLEVBQWUsU0FBVVksRUFBR0MsR0FDakNOLEVBQW1CTyxLQUFLRCxFQUFZLGFBQWVQLEVBQU8sTUFBUU8sRUFBWSxhQUFlUCxFQUFPLFVBQ3BHRSxFQUF3Qk0sS0FBS0QsRUFBWSxhQUFlUCxFQUFPLE9BR2pFSixFQUFFSyxFQUFtQlEsS0FBSyxNQUFNWCxLQUFLLFdBQ25DLElBQ0FZLEdBRElBLEVBQU9kLEVBQUVlLE1BQU1DLFFBQ1BDLFFBQ1ZWLEVBQ0EsMEJBQTRCSCxFQUFPLHVCQUVyQ0osRUFBRWUsTUFBTUMsS0FBS0YsS0FHWEwsRUFBUyxJQUFJRCxPQUFPSixFQUFNLEtBQzlCSixFQUFFTSxFQUF3Qk8sS0FBSyxNQUM1QkssSUFBSSxhQUNKaEIsS0FBSyxXQUNKLElBQ0FZLEdBRElBLEVBQU9kLEVBQUVlLE1BQU1DLFFBQ1BDLFFBQ1ZSLEVBQ0EsMEJBQTRCTCxFQUFPLHVCQUVyQ0osRUFBRWUsTUFBTUMsS0FBS0YsU0FNdkIsSUFBSUssR0FBVyxFQWtDZkMsV0FsQkEsU0FBU0MsSUFHUCxHQUFJQyxPQUFPdEIsR0FBS3NCLE9BQU90QixLQUFPc0IsT0FBT3RCLElBQUl1QixPQUN2QzVCLEVBQVMyQixPQUFPdEIsT0FDWCxJQUFLTCxJQUFXQSxFQUFPNEIsT0FHNUIsT0F0QkNKLElBQ1FLLEVBVVQsd0NBVllyQixFQVU2QixVQVRyQ3NCLEVBQUlDLFVBQ0RDLGVBQWV4QixNQUNoQnlCLEVBQUlILEVBQUVJLGNBQWMsV0FDdEJDLElBQU1OLEVBQ1JJLEVBQUVHLEdBQUs1QixFQUNQc0IsRUFBRU8sS0FBS0MsWUFBWUwsSUFFckJULEdBQVcsR0FhSkMsV0FBV0MsRUFBTyxLQXZCN0IsSUFFYUcsRUFBR3JCLEVBR055QixFQUZGSCxFQXdCRkgsT0FBT1ksV0FDVG5DLEtBS2MsR0FFbEJ1QixPQUFPYSxvQkFBc0IsQ0FDM0JDLE1BQU9yQyxHQW5HWCxDQXFHR3VCLE9BQU8zQiIsImZpbGUiOiJneXJvdG9uaWMtdHJhZGVtYXJrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChqUXVlcnkpIHtcbiAgdmFyIGNzc1J1bGVzID0gJy5ndC10aW1lcyB7JytcbiAgICAnZm9udC1mYW1pbHk6IFwidGltZXMgbmV3IHJvbWFuXCI7JyArXG4gICAgJ2ZvbnQtc3R5bGU6IG5vcm1hbCAhaW1wb3J0YW50OycgK1xuICAgICdmb250LXdlaWdodDogYm9sZDsnICtcbiAgICAndGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsnICtcbiAgJ30nICtcbiAgJy5ndC10aW1lcyAuZ3QtdGltZXMgc3VwIHsnICtcbiAgICAnZGlzcGxheTogbm9uZTsnICtcbiAgJ30nO1xuXG4gIHZhciByZWdUeXBlcyA9IFsnR1lST1RPTklDIEVYUEFOU0lPTiBTWVNURU0nLCAnR1lST1RPTklDJywgJ0dZUk9LSU5FU0lTJywgJ0dZUk9UT05FUiddO1xuICB2YXIgcmVnQ29udGFpbmVycyA9IFsnc3BhbicsICdwJywgJ2EnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnbGknXTtcbiAgdmFyIHJlZ0JyZWFrb3V0ID0gWydzdHJvbmcnXTtcblxuICBmdW5jdGlvbiByZXBsYWNlVHJhZGVtYXJrcygpIHtcbiAgICBqUXVlcnkoZnVuY3Rpb24oJCl7XG5cbiAgICAgICQoJ2JvZHknKS5hcHBlbmQoJzxzdHlsZT4nICsgY3NzUnVsZXMgKyAnPC9zdHlsZT4nKTtcblxuICAgICAgJC5lYWNoKHJlZ1R5cGVzLCBmdW5jdGlvbiAoaSwgdGVybSkge1xuICAgICAgICB2YXIgY29udGFpbmVyU2VsZWN0b3JzID0gW107XG4gICAgICAgIHZhciBjb250YWluZXJTZWxlY3RvcnNOb1JlZyA9IFtdO1xuXG4gICAgICAgIHZhciB0ZXJtUnJlID0gbmV3IFJlZ0V4cChcIig/PCE8W14+XSopXCIgKyB0ZXJtICsgXCLCrlwiLCBcImdcIik7XG4gICAgICAgIHZhciB0ZXJtUmUgPSBuZXcgUmVnRXhwKFwiKD88ITxbXj5dKilcIiArIHRlcm0sIFwiZ1wiKTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlVGVybXMoKSB7XG4gICAgICAgICAgdmFyIHRleHQgPSAkKHRoaXMpLmh0bWwoKTtcbiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHRlcm1ScmUsICc8c3BhbiBjbGFzcz1cImd0LXRpbWVzXCI+JyArIHRlcm0gKyAnPHN1cD7Crjwvc3VwPjwvc3Bhbj4nKTtcbiAgICAgICAgICAkKHRoaXMpLmh0bWwodGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICAkLmVhY2gocmVnQ29udGFpbmVycywgZnVuY3Rpb24gKGosIGNvbnRhaW5lcikge1xuICAgICAgICAgIGNvbnRhaW5lclNlbGVjdG9ycy5wdXNoKGNvbnRhaW5lciArICc6Y29udGFpbnMoJyArIHRlcm0gKyAnwq4pLCcgKyBjb250YWluZXIgKyAnOmNvbnRhaW5zKCcgKyB0ZXJtICsgJyZyZWc7KScpO1xuICAgICAgICAgIGNvbnRhaW5lclNlbGVjdG9yc05vUmVnLnB1c2goY29udGFpbmVyICsgJzpjb250YWlucygnICsgdGVybSArICcpJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoY29udGFpbmVyU2VsZWN0b3JzLmpvaW4oXCIsXCIpKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgdGV4dCA9ICQodGhpcykuaHRtbCgpO1xuICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoXG4gICAgICAgICAgICB0ZXJtUnJlLFxuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZ3QtdGltZXNcIj4nICsgdGVybSArIFwiPHN1cD7Crjwvc3VwPjwvc3Bhbj5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgJCh0aGlzKS5odG1sKHRleHQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdGVybVJlID0gbmV3IFJlZ0V4cCh0ZXJtLCBcImdcIik7XG4gICAgICAgICQoY29udGFpbmVyU2VsZWN0b3JzTm9SZWcuam9pbihcIixcIikpXG4gICAgICAgICAgLm5vdChcIi5ndC10aW1lc1wiKVxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gJCh0aGlzKS5odG1sKCk7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKFxuICAgICAgICAgICAgICB0ZXJtUmUsXG4gICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImd0LXRpbWVzXCI+JyArIHRlcm0gKyBcIjxzdXA+wq48L3N1cD48L3NwYW4+XCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAkKHRoaXMpLmh0bWwodGV4dCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBpbmplY3RlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBfaW5qZWN0SnF1ZXJ5KCl7XG4gICAgaWYoaW5qZWN0ZWQpIHJldHVybjtcbiAgICBmdW5jdGlvbiBsKHUsIGkpIHtcbiAgICAgIHZhciBkID0gZG9jdW1lbnQ7XG4gICAgICBpZiAoIWQuZ2V0RWxlbWVudEJ5SWQoaSkpIHtcbiAgICAgICAgdmFyIHMgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzLnNyYyA9IHU7XG4gICAgICAgIHMuaWQgPSBpO1xuICAgICAgICBkLmJvZHkuYXBwZW5kQ2hpbGQocyk7XG4gICAgICB9XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICAgIGwoJy8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjIuMS5taW4uanMnLCAnanF1ZXJ5Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5pdCgpIHtcblxuICAgIC8vIGZpbmQganF1ZXJ5XG4gICAgaWYgKHdpbmRvdy4kICYmIHdpbmRvdy4kKCkgJiYgd2luZG93LiQoKS5qcXVlcnkpIHtcbiAgICAgIGpRdWVyeSA9IHdpbmRvdy4kO1xuICAgIH0gZWxzZSBpZiAoIWpRdWVyeSB8fCAhalF1ZXJ5LmpxdWVyeSkge1xuICAgICAgLy8gaW5qZWN0IGl0IGlmIHdlIGNvdWxkbid0IGZpbmQgaXRcbiAgICAgIF9pbmplY3RKcXVlcnkoKTtcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KF9pbml0LCAyMDApO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGVuZCB1c2VyIHRvIGRpc2FibGUgYXV0by1yZXBsYWNlIHdpdGggd2luZG93LkdUX01BTlVBTCBjb25zdGFudFxuICAgIGlmKCF3aW5kb3cuR1RfTUFOVUFMKSB7XG4gICAgICByZXBsYWNlVHJhZGVtYXJrcygpO1xuICAgIH1cblxuICB9XG5cbiAgc2V0VGltZW91dChfaW5pdCwgMSk7XG5cbiAgd2luZG93Lmd5cm90b25pY1RyYWRlbWFya3MgPSB7XG4gICAgYXBwbHk6IHJlcGxhY2VUcmFkZW1hcmtzXG4gIH1cbn0pKHdpbmRvdy5qUXVlcnkpO1xuIl19
